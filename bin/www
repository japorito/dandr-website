#!/usr/bin/env node

var db = require('../services/db');
var app, debug, http;

/**
 * The HTTP server;
 */
var server;

db.init(function (err) {
    if (err) {
        console.error('Failed to get DB connection: ' + err);
        console.error('Halting startup...');

        // Only finish starting up server if the db connection is found.
        return;
    }

    var conf = require('../services/conf');

    // DB connection loaded, initialize configuration
    conf.initializeConfig(function() {
        /**
         * Module dependencies.
         */
        app = require('../app');
        debug = require('debug')('dandr:server');
        http = require('http');

        var config = conf.config;

        /**
         * Get port from environment and store in Express.
         */
        var port = normalizePort(config.port || '3000');
        app.set('port', port);

        /**
         * Create HTTP server.
         */
        server = http.createServer(app);

        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
